import json
from datetime import datetime

def dump_numeric(value, typename: str):
  s = str(value)
  if s.find('.') >= 0:
    s += 'f'
  elif typename == 'float':
    s += '.f'
  return s

def generate(obj, depth: int, ostream):
  PREFIX = depth * '  '

  if isinstance(obj, dict):
    for key in obj:
      if isinstance(obj[key], dict):
        print('{}struct {} {{'.format(PREFIX, str(key[0]).upper() + str(key[1:])), file = ostream)
        generate(obj[key], depth + 1, ostream)
        print('{}}} {};'.format(PREFIX, key), file = ostream)
      else:
        if isinstance(obj[key], str):
          print('{}std::string {} = "{}";'.format(PREFIX, key, obj[key]), file = ostream)
        elif isinstance(obj[key], list):
          array_len = len(obj[key])
          assert array_len > 0, "Wrong JSON sample: empty list as input"
          element_typename = type(obj[key][0]).__name__
          elements = ', '.join([ dump_numeric(x, element_typename) for x in obj[key]])
          print('{}std::array<{type}, {size}> {variable} = {{ {values} }};'
            .format(PREFIX, type = element_typename, size = array_len, variable = key, values = elements )
            , file = ostream)
        else:
          type_name = type(obj[key]).__name__
          print('{}{} {} = {};'.format(PREFIX, type_name, key, dump_numeric(obj[key], type_name)), file = ostream)

data = {}
with open('db.json', 'r') as istream:
  data = json.load(istream)

template = '// This file is auto generated by script\n// Date: {}\n\n#include <string>\n#include <array>\n'
with open('generated.cpp', 'w') as ostream:
  print(template.format(datetime.now().strftime("%d/%m/%Y %H:%M:%S")), file = ostream)
  print('namespace json_autogenerated_classes {\n', file = ostream)
  generate(data, 1, ostream)
  print('} // namespace json_autogenerated_classes', file = ostream)