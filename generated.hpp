// This file is auto generated by script
// Date: 23/12/2021 23:10:58

#include <string>
#include <array>

#include "rapidjson/document.h"
#include "rapidjson/writer.h"
#include "rapidjson/stringbuffer.h"

namespace json_autogenerated_classes {

struct Projectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Bow {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  Projectile projectile;
};

struct Weapons {
  Bow bow;
};

struct Archer {
  int health;
  std::string dragonbones;
  Weapons weapons;
};

struct Dash {
  std::string description;
  float cooldown;
  std::array<float, 2> velocity;
};

struct FirebookProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Firebook {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  FirebookProjectile projectile;
};

struct Firecloud {
  std::string description;
  float range;
  float cooldown;
  std::array<float, 2> impulse;
};

struct ChainSweepProjectile {
  std::string type;
  float damage;
  float lifetime;
};

struct ChainSweep {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  ChainSweepProjectile projectile;
};

struct ChainSwingProjectile {
  std::string type;
  float damage;
  float lifetime;
};

struct ChainSwing {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  ChainSwingProjectile projectile;
};

struct BanditBossWeapons {
  Dash dash;
  Firebook firebook;
  Firecloud firecloud;
  ChainSweep chainSweep;
  ChainSwing chainSwing;
};

struct BanditBoss {
  int health;
  std::string dragonbones;
  float jumpHeight;
  float defaultSpeed;
  float enhancedSpeed;
  BanditBossWeapons weapons;
};

struct LegsProjectile {
  std::string type;
  std::array<float, 2> impulse;
  std::array<float, 2> angular;
  float damage;
  float lifetime;
};

struct Legs {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  LegsProjectile projectile;
};

struct BoulderPusherWeapons {
  Legs legs;
};

struct BoulderPusher {
  int health;
  std::string dragonbones;
  BoulderPusherWeapons weapons;
};

struct CannonProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Cannon {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  CannonProjectile projectile;
};

struct CannonWeapons {
  Cannon cannon;
};

struct UnitsCannon {
  int health;
  std::string dragonbones;
  CannonWeapons weapons;
};

struct FireballProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Fireball {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  FireballProjectile projectile;
};

struct FirecloudWeapons {
  Fireball fireball;
};

struct UnitsFirecloud {
  int health;
  std::string dragonbones;
  float shellRefillCooldown;
  int shellRefillCount;
  float lifetime;
  float maxSpeed;
  FirecloudWeapons weapons;
};

struct Sword {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  float damage;
};

struct SpellProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Spell {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  SpellProjectile projectile;
};

struct SpecialProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct Special {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  SpecialProjectile projectile;
};

struct WeaponsDash {
  std::string description;
  float cooldown;
  std::array<float, 2> velocity;
};

struct PlayerWeapons {
  Sword sword;
  Spell spell;
  Special special;
  WeaponsDash dash;
};

struct Player {
  int health;
  std::string dragonbones;
  float maxSpeed;
  PlayerWeapons weapons;
};

struct WeaponsSpellProjectile {
  std::string type;
  std::array<float, 2> velocity;
  float damage;
  float lifetime;
};

struct WeaponsSpell {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  WeaponsSpellProjectile projectile;
};

struct SlimeWeapons {
  WeaponsSpell spell;
};

struct Slime {
  int health;
  std::string dragonbones;
  float maxSpeed;
  SlimeWeapons weapons;
};

struct Spear {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  float damage;
};

struct SpearmanWeapons {
  Spear spear;
};

struct Spearman {
  int health;
  std::string dragonbones;
  float maxSpeed;
  SpearmanWeapons weapons;
};

struct Spider {
  int health;
  std::string dragonbones;
  float linewidth;
  float idleSpeed;
  float alertSpeed;
};

struct Stalactite {
  std::string description;
  std::string type;
  float cooldown;
  float damage;
  std::array<float, 2> velocity;
};

struct StalactiteWeapons {
  Stalactite stalactite;
};

struct UnitsStalactite {
  int health;
  std::string dragonbones;
  StalactiteWeapons weapons;
};

struct Axe {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  float damage;
};

struct AxWarriorWeapons {
  Axe axe;
};

struct AxWarrior {
  int health;
  std::string dragonbones;
  float maxSpeed;
  AxWarriorWeapons weapons;
};

struct Sting {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  float damage;
};

struct WaspWeapons {
  Sting sting;
};

struct Wasp {
  int health;
  std::string dragonbones;
  float idleSpeed;
  float alertSpeed;
  WaspWeapons weapons;
};

struct Maw {
  std::string description;
  std::string type;
  float range;
  float cooldown;
  float damage;
};

struct WolfWeapons {
  Maw maw;
};

struct Wolf {
  int health;
  std::string dragonbones;
  float idleSpeed;
  float alertSpeed;
  WolfWeapons weapons;
};

struct Units {
  Archer archer;
  BanditBoss banditBoss;
  BoulderPusher boulderPusher;
  UnitsCannon cannon;
  UnitsFirecloud firecloud;
  Player player;
  Slime slime;
  Spearman spearman;
  Spider spider;
  UnitsStalactite stalactite;
  AxWarrior axWarrior;
  Wasp wasp;
  Wolf wolf;
};

} // namespace json_autogenerated_classes

namespace json_autogenerated_classes {

inline void FromJson(const rapidjson::Value& json, Projectile& projectile) {
  projectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    projectile.velocity[i] = values[i].GetFloat()
  }
  projectile.damage = json["damage"].GetFloat();
  projectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Bow& bow) {
  bow.description = json["description"].GetString();
  bow.type = json["type"].GetString();
  bow.range = json["range"].GetFloat();
  bow.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], bow.projectile);
}

inline void FromJson(const rapidjson::Value& json, Weapons& weapons) {
  FromJson(json["bow"], weapons.bow);
}

inline void FromJson(const rapidjson::Value& json, Archer& archer) {
  archer.health = json["health"].GetInt();
  archer.dragonbones = json["dragonbones"].GetString();
  FromJson(json["weapons"], archer.weapons);
}

inline void FromJson(const rapidjson::Value& json, Dash& dash) {
  dash.description = json["description"].GetString();
  dash.cooldown = json["cooldown"].GetFloat();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    dash.velocity[i] = values[i].GetFloat()
  }
}

inline void FromJson(const rapidjson::Value& json, FirebookProjectile& firebookProjectile) {
  firebookProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    firebookProjectile.velocity[i] = values[i].GetFloat()
  }
  firebookProjectile.damage = json["damage"].GetFloat();
  firebookProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Firebook& firebook) {
  firebook.description = json["description"].GetString();
  firebook.type = json["type"].GetString();
  firebook.range = json["range"].GetFloat();
  firebook.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], firebook.projectile);
}

inline void FromJson(const rapidjson::Value& json, Firecloud& firecloud) {
  firecloud.description = json["description"].GetString();
  firecloud.range = json["range"].GetFloat();
  firecloud.cooldown = json["cooldown"].GetFloat();
  const auto& values = json["impulse"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    firecloud.impulse[i] = values[i].GetFloat()
  }
}

inline void FromJson(const rapidjson::Value& json, ChainSweepProjectile& chainSweepProjectile) {
  chainSweepProjectile.type = json["type"].GetString();
  chainSweepProjectile.damage = json["damage"].GetFloat();
  chainSweepProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, ChainSweep& chainSweep) {
  chainSweep.description = json["description"].GetString();
  chainSweep.type = json["type"].GetString();
  chainSweep.range = json["range"].GetFloat();
  chainSweep.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], chainSweep.projectile);
}

inline void FromJson(const rapidjson::Value& json, ChainSwingProjectile& chainSwingProjectile) {
  chainSwingProjectile.type = json["type"].GetString();
  chainSwingProjectile.damage = json["damage"].GetFloat();
  chainSwingProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, ChainSwing& chainSwing) {
  chainSwing.description = json["description"].GetString();
  chainSwing.type = json["type"].GetString();
  chainSwing.range = json["range"].GetFloat();
  chainSwing.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], chainSwing.projectile);
}

inline void FromJson(const rapidjson::Value& json, BanditBossWeapons& banditBossWeapons) {
  FromJson(json["dash"], banditBossWeapons.dash);
  FromJson(json["firebook"], banditBossWeapons.firebook);
  FromJson(json["firecloud"], banditBossWeapons.firecloud);
  FromJson(json["chain_sweep"], banditBossWeapons.chainSweep);
  FromJson(json["chain_swing"], banditBossWeapons.chainSwing);
}

inline void FromJson(const rapidjson::Value& json, BanditBoss& banditBoss) {
  banditBoss.health = json["health"].GetInt();
  banditBoss.dragonbones = json["dragonbones"].GetString();
  banditBoss.jumpHeight = json["jump_height"].GetFloat();
  banditBoss.defaultSpeed = json["default_speed"].GetFloat();
  banditBoss.enhancedSpeed = json["enhanced_speed"].GetFloat();
  FromJson(json["weapons"], banditBoss.weapons);
}

inline void FromJson(const rapidjson::Value& json, LegsProjectile& legsProjectile) {
  legsProjectile.type = json["type"].GetString();
  const auto& values = json["impulse"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    legsProjectile.impulse[i] = values[i].GetFloat()
  }
  const auto& values = json["angular"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    legsProjectile.angular[i] = values[i].GetFloat()
  }
  legsProjectile.damage = json["damage"].GetFloat();
  legsProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Legs& legs) {
  legs.description = json["description"].GetString();
  legs.type = json["type"].GetString();
  legs.range = json["range"].GetFloat();
  legs.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], legs.projectile);
}

inline void FromJson(const rapidjson::Value& json, BoulderPusherWeapons& boulderPusherWeapons) {
  FromJson(json["legs"], boulderPusherWeapons.legs);
}

inline void FromJson(const rapidjson::Value& json, BoulderPusher& boulderPusher) {
  boulderPusher.health = json["health"].GetInt();
  boulderPusher.dragonbones = json["dragonbones"].GetString();
  FromJson(json["weapons"], boulderPusher.weapons);
}

inline void FromJson(const rapidjson::Value& json, CannonProjectile& cannonProjectile) {
  cannonProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    cannonProjectile.velocity[i] = values[i].GetFloat()
  }
  cannonProjectile.damage = json["damage"].GetFloat();
  cannonProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Cannon& cannon) {
  cannon.description = json["description"].GetString();
  cannon.type = json["type"].GetString();
  cannon.range = json["range"].GetFloat();
  cannon.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], cannon.projectile);
}

inline void FromJson(const rapidjson::Value& json, CannonWeapons& cannonWeapons) {
  FromJson(json["cannon"], cannonWeapons.cannon);
}

inline void FromJson(const rapidjson::Value& json, UnitsCannon& unitsCannon) {
  unitsCannon.health = json["health"].GetInt();
  unitsCannon.dragonbones = json["dragonbones"].GetString();
  FromJson(json["weapons"], unitsCannon.weapons);
}

inline void FromJson(const rapidjson::Value& json, FireballProjectile& fireballProjectile) {
  fireballProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    fireballProjectile.velocity[i] = values[i].GetFloat()
  }
  fireballProjectile.damage = json["damage"].GetFloat();
  fireballProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Fireball& fireball) {
  fireball.description = json["description"].GetString();
  fireball.type = json["type"].GetString();
  fireball.range = json["range"].GetFloat();
  fireball.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], fireball.projectile);
}

inline void FromJson(const rapidjson::Value& json, FirecloudWeapons& firecloudWeapons) {
  FromJson(json["fireball"], firecloudWeapons.fireball);
}

inline void FromJson(const rapidjson::Value& json, UnitsFirecloud& unitsFirecloud) {
  unitsFirecloud.health = json["health"].GetInt();
  unitsFirecloud.dragonbones = json["dragonbones"].GetString();
  unitsFirecloud.shellRefillCooldown = json["shell_refill_cooldown"].GetFloat();
  unitsFirecloud.shellRefillCount = json["shell_refill_count"].GetInt();
  unitsFirecloud.lifetime = json["lifetime"].GetFloat();
  unitsFirecloud.maxSpeed = json["max_speed"].GetFloat();
  FromJson(json["weapons"], unitsFirecloud.weapons);
}

inline void FromJson(const rapidjson::Value& json, Sword& sword) {
  sword.description = json["description"].GetString();
  sword.type = json["type"].GetString();
  sword.range = json["range"].GetFloat();
  sword.cooldown = json["cooldown"].GetFloat();
  sword.damage = json["damage"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, SpellProjectile& spellProjectile) {
  spellProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    spellProjectile.velocity[i] = values[i].GetFloat()
  }
  spellProjectile.damage = json["damage"].GetFloat();
  spellProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Spell& spell) {
  spell.description = json["description"].GetString();
  spell.type = json["type"].GetString();
  spell.range = json["range"].GetFloat();
  spell.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], spell.projectile);
}

inline void FromJson(const rapidjson::Value& json, SpecialProjectile& specialProjectile) {
  specialProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    specialProjectile.velocity[i] = values[i].GetFloat()
  }
  specialProjectile.damage = json["damage"].GetFloat();
  specialProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Special& special) {
  special.description = json["description"].GetString();
  special.type = json["type"].GetString();
  special.range = json["range"].GetFloat();
  special.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], special.projectile);
}

inline void FromJson(const rapidjson::Value& json, WeaponsDash& weaponsDash) {
  weaponsDash.description = json["description"].GetString();
  weaponsDash.cooldown = json["cooldown"].GetFloat();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    weaponsDash.velocity[i] = values[i].GetFloat()
  }
}

inline void FromJson(const rapidjson::Value& json, PlayerWeapons& playerWeapons) {
  FromJson(json["sword"], playerWeapons.sword);
  FromJson(json["spell"], playerWeapons.spell);
  FromJson(json["special"], playerWeapons.special);
  FromJson(json["dash"], playerWeapons.dash);
}

inline void FromJson(const rapidjson::Value& json, Player& player) {
  player.health = json["health"].GetInt();
  player.dragonbones = json["dragonbones"].GetString();
  player.maxSpeed = json["max_speed"].GetFloat();
  FromJson(json["weapons"], player.weapons);
}

inline void FromJson(const rapidjson::Value& json, WeaponsSpellProjectile& weaponsSpellProjectile) {
  weaponsSpellProjectile.type = json["type"].GetString();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    weaponsSpellProjectile.velocity[i] = values[i].GetFloat()
  }
  weaponsSpellProjectile.damage = json["damage"].GetFloat();
  weaponsSpellProjectile.lifetime = json["lifetime"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, WeaponsSpell& weaponsSpell) {
  weaponsSpell.description = json["description"].GetString();
  weaponsSpell.type = json["type"].GetString();
  weaponsSpell.range = json["range"].GetFloat();
  weaponsSpell.cooldown = json["cooldown"].GetFloat();
  FromJson(json["projectile"], weaponsSpell.projectile);
}

inline void FromJson(const rapidjson::Value& json, SlimeWeapons& slimeWeapons) {
  FromJson(json["spell"], slimeWeapons.spell);
}

inline void FromJson(const rapidjson::Value& json, Slime& slime) {
  slime.health = json["health"].GetInt();
  slime.dragonbones = json["dragonbones"].GetString();
  slime.maxSpeed = json["max_speed"].GetFloat();
  FromJson(json["weapons"], slime.weapons);
}

inline void FromJson(const rapidjson::Value& json, Spear& spear) {
  spear.description = json["description"].GetString();
  spear.type = json["type"].GetString();
  spear.range = json["range"].GetFloat();
  spear.cooldown = json["cooldown"].GetFloat();
  spear.damage = json["damage"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, SpearmanWeapons& spearmanWeapons) {
  FromJson(json["spear"], spearmanWeapons.spear);
}

inline void FromJson(const rapidjson::Value& json, Spearman& spearman) {
  spearman.health = json["health"].GetInt();
  spearman.dragonbones = json["dragonbones"].GetString();
  spearman.maxSpeed = json["max_speed"].GetFloat();
  FromJson(json["weapons"], spearman.weapons);
}

inline void FromJson(const rapidjson::Value& json, Spider& spider) {
  spider.health = json["health"].GetInt();
  spider.dragonbones = json["dragonbones"].GetString();
  spider.linewidth = json["linewidth"].GetFloat();
  spider.idleSpeed = json["idle_speed"].GetFloat();
  spider.alertSpeed = json["alert_speed"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, Stalactite& stalactite) {
  stalactite.description = json["description"].GetString();
  stalactite.type = json["type"].GetString();
  stalactite.cooldown = json["cooldown"].GetFloat();
  stalactite.damage = json["damage"].GetFloat();
  const auto& values = json["velocity"].GetArray();
  for (size_t i = 0; i < 2; i++) {
    stalactite.velocity[i] = values[i].GetFloat()
  }
}

inline void FromJson(const rapidjson::Value& json, StalactiteWeapons& stalactiteWeapons) {
  FromJson(json["stalactite"], stalactiteWeapons.stalactite);
}

inline void FromJson(const rapidjson::Value& json, UnitsStalactite& unitsStalactite) {
  unitsStalactite.health = json["health"].GetInt();
  unitsStalactite.dragonbones = json["dragonbones"].GetString();
  FromJson(json["weapons"], unitsStalactite.weapons);
}

inline void FromJson(const rapidjson::Value& json, Axe& axe) {
  axe.description = json["description"].GetString();
  axe.type = json["type"].GetString();
  axe.range = json["range"].GetFloat();
  axe.cooldown = json["cooldown"].GetFloat();
  axe.damage = json["damage"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, AxWarriorWeapons& axWarriorWeapons) {
  FromJson(json["axe"], axWarriorWeapons.axe);
}

inline void FromJson(const rapidjson::Value& json, AxWarrior& axWarrior) {
  axWarrior.health = json["health"].GetInt();
  axWarrior.dragonbones = json["dragonbones"].GetString();
  axWarrior.maxSpeed = json["max_speed"].GetFloat();
  FromJson(json["weapons"], axWarrior.weapons);
}

inline void FromJson(const rapidjson::Value& json, Sting& sting) {
  sting.description = json["description"].GetString();
  sting.type = json["type"].GetString();
  sting.range = json["range"].GetFloat();
  sting.cooldown = json["cooldown"].GetFloat();
  sting.damage = json["damage"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, WaspWeapons& waspWeapons) {
  FromJson(json["sting"], waspWeapons.sting);
}

inline void FromJson(const rapidjson::Value& json, Wasp& wasp) {
  wasp.health = json["health"].GetInt();
  wasp.dragonbones = json["dragonbones"].GetString();
  wasp.idleSpeed = json["idle_speed"].GetFloat();
  wasp.alertSpeed = json["alert_speed"].GetFloat();
  FromJson(json["weapons"], wasp.weapons);
}

inline void FromJson(const rapidjson::Value& json, Maw& maw) {
  maw.description = json["description"].GetString();
  maw.type = json["type"].GetString();
  maw.range = json["range"].GetFloat();
  maw.cooldown = json["cooldown"].GetFloat();
  maw.damage = json["damage"].GetFloat();
}

inline void FromJson(const rapidjson::Value& json, WolfWeapons& wolfWeapons) {
  FromJson(json["maw"], wolfWeapons.maw);
}

inline void FromJson(const rapidjson::Value& json, Wolf& wolf) {
  wolf.health = json["health"].GetInt();
  wolf.dragonbones = json["dragonbones"].GetString();
  wolf.idleSpeed = json["idle_speed"].GetFloat();
  wolf.alertSpeed = json["alert_speed"].GetFloat();
  FromJson(json["weapons"], wolf.weapons);
}

inline void FromJson(const rapidjson::Value& json, Units& units) {
  FromJson(json["archer"], units.archer);
  FromJson(json["bandit_boss"], units.banditBoss);
  FromJson(json["boulder_pusher"], units.boulderPusher);
  FromJson(json["cannon"], units.cannon);
  FromJson(json["firecloud"], units.firecloud);
  FromJson(json["player"], units.player);
  FromJson(json["slime"], units.slime);
  FromJson(json["spearman"], units.spearman);
  FromJson(json["spider"], units.spider);
  FromJson(json["stalactite"], units.stalactite);
  FromJson(json["ax_warrior"], units.axWarrior);
  FromJson(json["wasp"], units.wasp);
  FromJson(json["wolf"], units.wolf);
}


} // namespace json_autogenerated_classes
